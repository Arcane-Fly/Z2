# Frontend Dockerfile
FROM node:18-alpine as frontend

# Railway-specific build arguments
ARG RAILWAY_ENVIRONMENT
ARG PORT=3000

WORKDIR /app

# Copy package files
COPY frontend/package.json frontend/package-lock.json* ./

# Install dependencies
RUN npm ci

# Copy source code
COPY frontend/ .

# Build the application
RUN npm run build

# Production stage
FROM nginx:alpine

# Install curl for health checks
RUN apk add --no-cache curl

# Create non-root user
RUN adduser -D -u 1000 appuser

# Railway-specific build arguments  
ARG RAILWAY_ENVIRONMENT
ARG PORT=80

# Copy built app to nginx
COPY --from=frontend /app/dist /usr/share/nginx/html

# Create storage directory for shared files
RUN mkdir -p /app/storage && chown appuser:appuser /app/storage

# Copy nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf

# Create a custom nginx config that runs on non-privileged port
RUN sed -i 's/listen 80/listen 8080/' /etc/nginx/nginx.conf && \
    sed -i 's/user nginx/user appuser/' /etc/nginx/nginx.conf && \
    chown -R appuser:appuser /var/cache/nginx && \
    chown -R appuser:appuser /var/log/nginx && \
    chown -R appuser:appuser /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown -R appuser:appuser /var/run/nginx.pid

# Switch to non-root user
USER appuser

# Set environment variables for Railway
ENV HOST=0.0.0.0
ENV PORT=8080

# Expose port
EXPOSE 8080

# Health check for Railway
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:8080/ || exit 1

CMD ["nginx", "-g", "daemon off;"]
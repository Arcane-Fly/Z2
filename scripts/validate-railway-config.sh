#!/bin/bash

# ‚ùå DEPRECATED: This script is outdated and conflicts with Railway Deployment Master Cheat Sheet
# 
# üö® WARNING: This script references railway.json, Dockerfile, and nginx configurations
# that should NOT exist in a railpack-only deployment.
#
# ‚úÖ USE INSTEAD: scripts/railway-railpack-validation.sh
# This enforces the correct Railway Deployment Master Cheat Sheet standards:
# - Railpack-only configuration (no competing build files)
# - Proper PORT/HOST binding
# - Health check validation

echo "‚ùå DEPRECATED SCRIPT"
echo "==================="
echo
echo "This script is deprecated and conflicts with Railway Deployment Master Cheat Sheet."
echo "It references railway.json and other competing build configurations that should NOT exist."
echo
echo "‚úÖ Use the correct validation script instead:"
echo "   bash scripts/railway-railpack-validation.sh"
echo
echo "The new script enforces railpack-only standards per Railway best practices."
echo

exit 1
        echo "‚ùå Dockerfile builder not configured"
        exit 1
    fi
    
    # Check for health check
    if grep -q '"healthcheckPath"' frontend/railway.json; then
        echo "‚úÖ Health check path configured"
    else
        echo "‚ö†Ô∏è  Health check path not configured (recommended)"
    fi
else
    echo "‚ùå frontend/railway.json missing"
    exit 1
fi

# Check frontend Dockerfile
if [ -f "frontend/Dockerfile" ]; then
    echo "‚úÖ frontend/Dockerfile exists"
    
    # Verify multi-stage build
    if grep -q "FROM node.*AS build" frontend/Dockerfile && grep -q "FROM nginx:alpine" frontend/Dockerfile; then
        echo "‚úÖ Multi-stage Dockerfile (Node.js build ‚Üí nginx runtime)"
    else
        echo "‚ùå Dockerfile not configured for multi-stage build"
        exit 1
    fi
    
    # Check for nginx CMD
    if grep -q 'CMD.*nginx.*daemon off' frontend/Dockerfile; then
        echo "‚úÖ Nginx daemon off command in Dockerfile"
    else
        echo "‚ùå Missing nginx daemon off command"
        exit 1
    fi
else
    echo "‚ùå frontend/Dockerfile missing"
    exit 1
fi

# Check backend configuration  
echo
echo "Backend Configuration:"
echo "----------------------"

if [ -f "backend/railway.toml" ]; then
    echo "‚úÖ backend/railway.toml exists"
    
    # Check for uvicorn startCommand
    if grep -q 'startCommand.*uvicorn' backend/railway.toml; then
        echo "‚úÖ uvicorn startCommand configured"
    else
        echo "‚ùå uvicorn startCommand missing or incorrect"
        exit 1
    fi
    
    # Check for health check
    if grep -q 'healthcheckPath.*health' backend/railway.toml; then
        echo "‚úÖ Health check path configured"
    else
        echo "‚ùå Health check path not configured"
        exit 1
    fi
else
    echo "‚ùå backend/railway.toml missing"
    exit 1
fi

# Check backend health endpoint
if [ -f "backend/app/main.py" ]; then
    if grep -q '@app\.get("/health")' backend/app/main.py; then
        echo "‚úÖ Backend health endpoint exists"
    else
        echo "‚ùå Backend health endpoint missing"
        exit 1
    fi
else
    echo "‚ùå backend/app/main.py missing"
    exit 1
fi

# Check nginx health endpoint
if [ -f "frontend/nginx.conf.template" ]; then
    if grep -q 'location /health' frontend/nginx.conf.template; then
        echo "‚úÖ Frontend nginx health endpoint exists"
    else
        echo "‚ö†Ô∏è  Frontend nginx health endpoint missing (recommended)"
    fi
else
    echo "‚ö†Ô∏è  frontend/nginx.conf.template missing"
fi

echo
echo "‚úÖ All critical Railway configurations validated successfully!"
echo
echo "üöÄ Ready for Railway deployment:"
echo "  - Frontend: Dockerfile with nginx startCommand override"
echo "  - Backend: nixpacks with uvicorn startCommand"
echo "  - Health checks: Configured for both services"
echo
echo "Next steps:"
echo "  1. Push changes to trigger Railway deployment"
echo "  2. Monitor logs: railway logs --service <service-name> --tail"
echo "  3. Verify health checks: curl https://<domain>/health"
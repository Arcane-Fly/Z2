name: Z2 Platform CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Backend Tests and Linting
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: z2_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: |
          backend/.venv
          ~/.cache/pypoetry
        key: poetry-${{ runner.os }}-${{ hashFiles('backend/poetry.lock') }}
        restore-keys: |
          poetry-${{ runner.os }}-

    - name: Install dependencies
      working-directory: ./backend
      run: poetry install

    - name: Lint with Ruff
      working-directory: ./backend
      run: poetry run ruff check .

    - name: Format check with Ruff
      working-directory: ./backend
      run: poetry run ruff format --check .

    - name: Type check with MyPy
      working-directory: ./backend
      run: poetry run mypy app/

    - name: Run tests
      working-directory: ./backend
      env:
        TEST_DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/z2_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: true
      run: |
        poetry run pytest --cov=app --cov-report=xml --cov-report=html \
          --junitxml=pytest-report.xml \
          -m "not slow" \
          --maxfail=10 \
          -x

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend Tests and Linting
  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache npm dependencies
      uses: actions/cache@v4
      with:
        path: |
          frontend/node_modules
          ~/.npm
        key: npm-${{ runner.os }}-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          npm-${{ runner.os }}-

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Lint with ESLint
      working-directory: ./frontend
      run: npm run lint

    - name: Format check with Prettier
      working-directory: ./frontend
      run: npm run format:check

    - name: Type check
      working-directory: ./frontend
      run: npm run type-check

    - name: Run unit tests
      working-directory: ./frontend
      run: npm run test -- --run --coverage

    - name: Build application
      working-directory: ./frontend
      run: npm run build

    - name: Install Playwright browsers
      working-directory: ./frontend
      run: npx playwright install --with-deps chromium

    - name: Run E2E tests
      working-directory: ./frontend
      run: npm run test:e2e -- --project=chromium
      env:
        CI: true

  # Enhanced Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: |
          backend/.venv
          ~/.cache/pypoetry
        key: poetry-${{ runner.os }}-${{ hashFiles('backend/poetry.lock') }}

    - name: Install dependencies
      working-directory: ./backend
      run: poetry install

    - name: Generate requirements.txt for safety check
      working-directory: ./backend
      run: poetry export -f requirements.txt --output requirements.txt

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Python security check with Safety
      working-directory: ./backend
      run: |
        pip install safety
        safety check --file requirements.txt --json --output safety-report.json || true

    - name: Python security check with Bandit
      working-directory: ./backend
      run: |
        pip install bandit[toml]
        bandit -r app/ -f json -o bandit-report.json -c .bandit || true
        bandit -r app/ -f txt || true

    - name: Run security-focused tests
      working-directory: ./backend
      env:
        TEST_DATABASE_URL: sqlite+aiosqlite:///./test.db
        SECRET_KEY: test-secret-key-for-security-tests
      run: |
        poetry run pytest tests/test_security.py -v --tb=short || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          backend/safety-report.json
          backend/bandit-report.json
          trivy-results.sarif

    - name: Container security scan
      run: |
        # Install Docker Scout
        curl -fsSL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh
        
        # Build images for scanning
        docker build -f Dockerfile.backend -t z2-backend:security-scan .
        docker build -f Dockerfile.frontend -t z2-frontend:security-scan .
        
        # Scan backend image
        docker scout quickview z2-backend:security-scan || true
        docker scout cves z2-backend:security-scan --format sarif --output backend-cves.sarif || true
        
        # Scan frontend image  
        docker scout quickview z2-frontend:security-scan || true
        docker scout cves z2-frontend:security-scan --format sarif --output frontend-cves.sarif || true

    - name: Upload container security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: container-security-reports
        path: |
          *-cves.sarif

  # Build and Test Docker Images
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.backend
        push: false
        tags: z2-backend:test
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        platforms: linux/amd64

    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.frontend
        push: false
        tags: z2-frontend:test
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        platforms: linux/amd64

    - name: Test Docker containers
      run: |
        # Start containers for testing
        docker run -d --name z2-backend-test -p 8000:8000 -e DATABASE_URL="sqlite:///./test.db" z2-backend:test
        docker run -d --name z2-frontend-test -p 3000:8080 z2-frontend:test
        
        # Wait for containers to start
        sleep 30
        
        # Test backend health
        curl -f http://localhost:8000/health/live || exit 1
        
        # Test frontend
        curl -f http://localhost:3000/ || exit 1
        
        # Cleanup
        docker stop z2-backend-test z2-frontend-test
        docker rm z2-backend-test z2-frontend-test

    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # Load Testing
  load-test:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: z2_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Install backend dependencies
      working-directory: ./backend
      run: poetry install

    - name: Start Z2 backend for testing
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/z2_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-load-testing
        DEBUG: true
      run: |
        poetry run uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 30  # Wait for startup

    - name: Install load testing dependencies
      working-directory: ./load-tests
      run: pip install -r requirements.txt

    - name: Run basic load test
      working-directory: ./load-tests
      run: |
        ./run-load-test.sh --host http://localhost:8000 --users 5 --time 2m --test-type basic --headless --csv ci-load-test

    - name: Upload load test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: load-test-results
        path: |
          load-tests/ci-load-test_*.csv
  # Deploy to Railway (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, docker-build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Railway CLI
      run: npm install -g @railway/cli

    - name: Deploy to Railway
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        if [ -n "$RAILWAY_TOKEN" ]; then
          railway login --token $RAILWAY_TOKEN
          railway deploy
        else
          echo "Railway token not configured, skipping deployment"
        fi

  # Notify on completion
  notify:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan, docker-build, load-test]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.backend-test.result == 'success' && needs.frontend-test.result == 'success' }}
      run: echo "✅ All checks passed successfully!"
    
    - name: Notify failure
      if: ${{ needs.backend-test.result == 'failure' || needs.frontend-test.result == 'failure' }}
      run: |
        echo "❌ Some checks failed:"
        echo "Backend: ${{ needs.backend-test.result }}"
        echo "Frontend: ${{ needs.frontend-test.result }}"
        echo "Security: ${{ needs.security-scan.result }}"
        echo "Docker: ${{ needs.docker-build.result }}"